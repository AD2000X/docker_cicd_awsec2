# GitHub Actions workflow file that automates deployment to EC2
# Triggers when code is pushed to the main branch
# Connects to EC2 via SSH and deploys the application in a Docker container

name: Deploy to EC2  # The name of this GitHub Actions workflow

on:  # Defines the events that trigger this workflow
  push:  # Trigger on code push events
    branches:  # Specify which branches activate the workflow
      - main  # Only the main branch triggers this workflow

jobs:  # Define jobs that run in this workflow
  deploy:  # Job name for deployment task
    runs-on: ubuntu-latest  # Uses Ubuntu as the runner environment

    steps:  # Sequential steps in this job
      - name: Checkout code  # Step to fetch repository code
        uses: actions/checkout@v3  # Use GitHub's checkout action version 3
      
      - name: Setup SSH key  # Step to prepare SSH authentication
        run: |  # Multi-line shell commands
          echo "${{ secrets.AWS_KEY }}" > key.pem  # Write private key from secrets
          chmod 400 key.pem  # Set proper permissions for the key file
      
      - name: Connect & Deploy to EC2  # Step to deploy to EC2
        run: |  # Multi-line shell commands
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'  # SSH connection with heredoc
            # Install git if needed
            command -v git || sudo dnf install -y git  # Install git if not already installed
            
            # prepare work catalogue
            if [ ! -d docker_cicd_awsec2 ]; then  # Check if repository directory exists
              git clone https://github.com/AD2000X/docker_cicd_awsec2.git  # Clone if not exists
            fi
            cd docker_cicd_awsec2  # Navigate to project directory
            git pull origin main  # Update to latest code

            # Rebuild Docker
            docker rm -f flask-app || true  # Remove existing container if any
            docker build -t flask-app .  # Build Docker image with tag flask-app
            docker run -d -p 80:5000 --name flask-app flask-app  # Run container, mapping port 5000 to 80
          EOF  # End of heredoc
